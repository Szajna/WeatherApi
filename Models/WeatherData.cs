// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using WeatherAplication;
//
//    var weatherData = WeatherData.FromJson(jsonString);

namespace WeatherAplication
{
    using System;

    using System.Globalization;
    using System.Text.Json;
    using Newtonsoft.Json;
    using JsonConverter = Newtonsoft.Json.JsonConverter;
    using Newtonsoft.Json.Converters;

    public partial class WeatherData
    {
        [JsonProperty("data")]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("request")]
        public Request[] Request { get; set; }

        [JsonProperty("weather")]
        public Weather[] Weather { get; set; }
    }

    public partial class Request
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("query")]
        public string Query { get; set; }
    }

    public partial class Weather
    {
        [JsonProperty("date")]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("astronomy")]
        public Astronomy[] Astronomy { get; set; }

        [JsonProperty("maxtempC")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MaxtempC { get; set; }

        [JsonProperty("maxtempF")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MaxtempF { get; set; }

        [JsonProperty("mintempC")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MintempC { get; set; }

        [JsonProperty("mintempF")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MintempF { get; set; }

        [JsonProperty("avgtempC")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long AvgtempC { get; set; }

        [JsonProperty("avgtempF")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long AvgtempF { get; set; }

        [JsonProperty("totalSnow_cm")]
        public string TotalSnowCm { get; set; }

        [JsonProperty("sunHour")]
        public string SunHour { get; set; }

        [JsonProperty("uvIndex")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long UvIndex { get; set; }

        [JsonProperty("hourly")]
        public Hourly[] Hourly { get; set; }
    }

    public partial class Astronomy
    {
        [JsonProperty("sunrise")]
        public string Sunrise { get; set; }

        [JsonProperty("sunset")]
        public string Sunset { get; set; }

        [JsonProperty("moonrise")]
        public string Moonrise { get; set; }

        [JsonProperty("moonset")]
        public string Moonset { get; set; }

        [JsonProperty("moon_phase")]
        public string MoonPhase { get; set; }

        [JsonProperty("moon_illumination")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MoonIllumination { get; set; }
    }

    public partial class Hourly
    {
        [JsonProperty("time")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Time { get; set; }

        [JsonProperty("tempC")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TempC { get; set; }

        [JsonProperty("tempF")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TempF { get; set; }

        [JsonProperty("windspeedMiles")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long WindspeedMiles { get; set; }

        [JsonProperty("windspeedKmph")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long WindspeedKmph { get; set; }

        [JsonProperty("winddirDegree")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long WinddirDegree { get; set; }

        [JsonProperty("winddir16Point")]
        public string Winddir16Point { get; set; }

        [JsonProperty("weatherCode")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long WeatherCode { get; set; }

        [JsonProperty("weatherIconUrl")]
        public WeatherDescElement[] WeatherIconUrl { get; set; }

        [JsonProperty("weatherDesc")]
        public WeatherDescElement[] WeatherDesc { get; set; }

        [JsonProperty("precipMM")]
        public string PrecipMm { get; set; }

        [JsonProperty("precipInches")]
        public string PrecipInches { get; set; }

        [JsonProperty("humidity")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Humidity { get; set; }

        [JsonProperty("visibility")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Visibility { get; set; }

        [JsonProperty("visibilityMiles")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long VisibilityMiles { get; set; }

        [JsonProperty("pressure")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Pressure { get; set; }

        [JsonProperty("pressureInches")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PressureInches { get; set; }

        [JsonProperty("cloudcover")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Cloudcover { get; set; }

        [JsonProperty("HeatIndexC")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long HeatIndexC { get; set; }

        [JsonProperty("HeatIndexF")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long HeatIndexF { get; set; }

        [JsonProperty("DewPointC")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long DewPointC { get; set; }

        [JsonProperty("DewPointF")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long DewPointF { get; set; }

        [JsonProperty("WindChillC")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long WindChillC { get; set; }

        [JsonProperty("WindChillF")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long WindChillF { get; set; }

        [JsonProperty("WindGustMiles")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long WindGustMiles { get; set; }

        [JsonProperty("WindGustKmph")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long WindGustKmph { get; set; }

        [JsonProperty("FeelsLikeC")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long FeelsLikeC { get; set; }

        [JsonProperty("FeelsLikeF")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long FeelsLikeF { get; set; }

        [JsonProperty("chanceofrain")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Chanceofrain { get; set; }

        [JsonProperty("chanceofremdry")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Chanceofremdry { get; set; }

        [JsonProperty("chanceofwindy")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Chanceofwindy { get; set; }

        [JsonProperty("chanceofovercast")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Chanceofovercast { get; set; }

        [JsonProperty("chanceofsunshine")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Chanceofsunshine { get; set; }

        [JsonProperty("chanceoffrost")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Chanceoffrost { get; set; }

        [JsonProperty("chanceofhightemp")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Chanceofhightemp { get; set; }

        [JsonProperty("chanceoffog")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Chanceoffog { get; set; }

        [JsonProperty("chanceofsnow")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Chanceofsnow { get; set; }

        [JsonProperty("chanceofthunder")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Chanceofthunder { get; set; }

        [JsonProperty("uvIndex")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long UvIndex { get; set; }
    }

    public partial class WeatherDescElement
    {
        [JsonProperty("value")]
        public string Value { get; set; }
    }

    public partial class WeatherData
    {
        public static WeatherData FromJson(string json) => JsonConvert.DeserializeObject<WeatherData>(json, WeatherAplication.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this WeatherData self) => JsonConvert.SerializeObject(self, WeatherAplication.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
